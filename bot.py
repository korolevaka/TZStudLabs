
from telebot.async_telebot import AsyncTeleBot
from database import engine, Base
import json
import requests
from telebot import types
from database import Session, log_user_action
from models import UserSettings
from keyboards import (main_menu_keyboard, return_menu_keyboard, joke_keyboard)
import config
from googletrans import Translator
translator = Translator()


bot = AsyncTeleBot(config.BOT_TOKEN)
Base.metadata.create_all(engine)

user_states_weather = {}
user_states_joke = {}
user_states_news = {}

markup_menu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
help = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
settings = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
weather = types.KeyboardButton('–ü–æ–≥–æ–¥–∞')
news = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏')
joke = types.KeyboardButton('–®—É—Ç–∫–∏')
markup_menu.add(help, settings, weather, news, joke)

@bot.message_handler(commands=["start"])
async def start_menu(message):
    await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Çüëãüèª, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!",reply_markup=main_menu_keyboard())
@bot.message_handler(func=lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
async def info(message):
    await bot.send_message(message.chat.id, "–Ø —á–∞—Ç-–±–æ—Ç –ü–æ–≥–æ–¥–∞/–ù–æ–≤–æ—Å—Ç–∏/–®—É—Ç–∫–∏!ü§ñ\n–ú–µ–Ω—è —Å–¥–µ–ª–∞–ª–∞: –ö–æ—Ä–æ–ª–µ–≤–∞ –ö—Å–µ–Ω–∏—è –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞ \n"
                                         "–Ø —É–º–µ—é:\n"
                             "startüëãüèª - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –≤—ã–≤–æ–¥ –º–µ–Ω—é\n"
                             "helpüôèüèª - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
                             "settingsüõ† - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                             "weather‚òÄÔ∏è - –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã\n"
                             "newsüì± - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                             "jokeü§£ - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —à—É—Ç–∫–∏", reply_markup=return_menu_keyboard())
    session = Session()
    log_user_action(session, message.from_user.id, message.from_user.username,
                    message.from_user.first_name, message.text)
    session.close()

@bot.message_handler(func=lambda message: message.text == '–ü–æ–≥–æ–¥–∞')
async def weather(message):
    user_states_weather[message.chat.id] = "get_city"
    markup = types.ReplyKeyboardRemove(selective=False)
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥üìç:", reply_markup=markup)
    session = Session()
    log_user_action(session, message.from_user.id, message.from_user.username,
                    message.from_user.first_name, message.text)
    session.close()
@bot.message_handler(func=lambda message:user_states_weather.get(message.chat.id) == "get_city")
async def get_weather(message):
    del user_states_weather[message.chat.id]
    city = message.text.strip().lower()
    session = Session()
    user_settings = session.query(UserSettings).get(message.from_user.id)
    user_settings.city = city
    session.commit()
    session.close()
    res = requests.get(
        f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={config.API_weather}&units=metric')
    data = json.loads(res.text)
    try:
        temp = data["main"]["temp"]
        await bot.send_message(message.chat.id, f'–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–≥–æ–¥–∞: {temp}¬∞C')
        await bot.send_message(message.chat.id, f'–ù–æ –æ—â—É—â–∞–µ—Ç—Å—è, –∫–∞–∫: {data["main"]["feels_like"]}¬∞C')
        if temp <= -10.0:
            await bot.send_message(message.chat.id, '‚õÑÔ∏è–ù–∞ —É–ª–∏—Ü–µ –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ!‚õÑÔ∏è\n –ù–∞–¥–µ–≤–∞–π - —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É, —Ç–µ–ø–ª—É—é —à–∞–ø–∫—É, —Ç–µ–ø–ª—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏, —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏ ', reply_markup=return_menu_keyboard())
        elif temp > -10.0 and temp <= 0.0:
            await bot.send_message(message.chat.id, '‚ùÑÔ∏è–ù–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ‚ùÑÔ∏è\n –ù–∞–¥–µ–≤–∞–π - –∫—É—Ä—Ç–∫—É, —à–∞–ø–∫—É, –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏, –±–æ—Ç–∏–Ω–∫–∏', reply_markup=return_menu_keyboard())
        elif temp > 0.0 and temp <= 10.0:
            await bot.send_message(message.chat.id, '‚õÖÔ∏è–ù–∞ —É–ª–∏—Ü–µ —Ç–µ–ø–ª–æ‚õÖÔ∏è\n –ù–∞–¥–µ–≤–∞–π - –≤–µ—Ç—Ä–æ–≤–∫—É, –ª–µ–≥–∫—É—é —à–∞–ø–∫—É –∏–ª–∏ —à–∞—Ä—Ñ, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏–ª–∏ –±–æ—Ç–∏–Ω–∫–∏', reply_markup=return_menu_keyboard())
        elif temp > 10.0 and temp <= 20.0:
            await bot.send_message(message.chat.id, '‚òÄÔ∏è–ù–∞ —É–ª–∏—Ü–µ –∂–∞—Ä–∫–æ‚òÄÔ∏è\n –ù–∞–¥–µ–≤–∞–π - –¥–∂–∏–Ω—Å—ã –∏–ª–∏ –±—Ä—é–∫–∏, —Ñ—É—Ç–±–æ–ª–∫—É –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä, –ª–µ–≥–∫—É—é –æ–±—É–≤—å –∏–ª–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏', reply_markup=return_menu_keyboard())
        elif temp > 20.0:
            await bot.send_message(message.chat.id, 'üî•–ù–∞ —É–ª–∏—Ü–µ –æ—á–µ–Ω—å –∂–∞—Ä–∫–æ, –∏–¥–∏ –∑–∞–≥–æ—Ä–∞—Ç—å!üî•\n –ù–∞–¥–µ–≤–∞–π - –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É (—Ñ—É—Ç–±–æ–ª–∫–∞, —à–æ—Ä—Ç—ã, –ø–ª–∞—Ç—å–µ), —à–ª—è–ø—É –∏–ª–∏ –∫–µ–ø–∫—É, —Å–∞–Ω–¥–∞–ª–∏–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—É—é –æ–±—É–≤—å', reply_markup=return_menu_keyboard())
    except KeyError:
        await bot.send_message(message.chat.id,
                         "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥",reply_markup=markup_menu)
    session = Session()
    log_user_action(session, message.from_user.id, message.from_user.username,
                    message.from_user.first_name, message.text)
    session.close()


@bot.message_handler(func=lambda message: message.text == '–®—É—Ç–∫–∏')
async def joke(message):
    user_states_joke[message.chat.id] = "categorys"
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –ª—é–±–æ–µ, —Ä–∞–∑–Ω–æ–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –º—Ä–∞—á–Ω–æ–µ, –∫–∞–ª–∞–º–±—É—Ä, –∂—É—Ç–∫–æ–µ, —Ä–æ–∂–¥–µ—Å—Ç–≤–æ",reply_markup=joke_keyboard())
    session = Session()
    log_user_action(session, message.from_user.id, message.from_user.username,
                    message.from_user.first_name, message.text)
    session.close()
@bot.message_handler(func=lambda message: user_states_joke.get(message.chat.id) == "categorys")
async def send_joke(message):
    del user_states_joke[message.chat.id]
    category = message.text
    session = Session()
    user_settings = session.query(UserSettings).get(message.from_user.id)
    user_settings.joke_category = category
    session.commit()
    session.close()
    res = requests.get(f'https://jokeapi.dev/joke/{category}')
    data = json.loads(res.text)
    if 'joke' in data:
        joke_text = data["joke"]
    elif 'setup' in data and 'delivery' in data:
        joke_text = f'{data["setup"]} {data["delivery"]}'
    else:
        await bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",reply_markup=return_menu_keyboard())
        return
    try:
        translated_text = translator.translate(joke_text, dest='ru').text
    except Exception as e:
        print(f"Translation error: {e}")
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —à—É—Ç–∫–∏.",reply_markup=return_menu_keyboard())
        return
    await bot.send_message(message.chat.id, translated_text, reply_markup=return_menu_keyboard())
    session = Session()
    log_user_action(session, message.from_user.id, message.from_user.username,
                    message.from_user.first_name, message.text)
    session.close()

@bot.message_handler(func=lambda message: message.text == '–ù–æ–≤–æ—Å—Ç–∏')
async def news(message):
    user_states_news[message.chat.id] = "categorys_news"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    world_news = types.KeyboardButton('–û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏')
    local_news = types.KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω—É')
    markup.add(world_news, local_news)
    await bot.send_message(message.chat.id,
                     "–í—ã–±–µ—Ä–∏ –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: –æ–±—â–∏–µ –∏–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ:",
                     reply_markup=markup)
    session = Session()
    log_user_action(session, message.from_user.id, message.from_user.username,
                    message.from_user.first_name, message.text)
    session.close()
    session = Session()

@bot.message_handler(func=lambda message:user_states_news.get(message.chat.id) == "categorys_news")
async def get_news(message):
    del user_states_news[message.chat.id]
    if message.text == '–û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏':
        res = requests.get(f'https://newsapi.org/v2/top-headlines?country=ru&apiKey={config.NEWS_API_KEY}')
        news_data = res.json()
        if res.status_code == 200:
            articles = news_data['articles'][:5]
            for article in articles:
                title = article['title']
                url = article['url']
                description = article['description']
                news_text = f"*{title}*\n\n{description}\n\n[–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({url})"
                await bot.send_message(message.chat.id, news_text, parse_mode='Markdown', reply_markup=return_menu_keyboard())
        else:
            await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.", reply_markup=return_menu_keyboard())
    else:
        user_states_news[message.chat.id] = "region"
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'us', 'ru'):")
        return
    session = Session()
    log_user_action(session, message.from_user.id, message.from_user.username,
                    message.from_user.first_name, message.text)
    session.close()
@bot.message_handler(func=lambda message:user_states_news.get(message.chat.id) == "region")
async def get_news_by_region(message):
    del user_states_news[message.chat.id]
    region = message.text.lower()
    session = Session()
    user_settings = session.query(UserSettings).get(message.from_user.id)
    user_settings.news_category = region
    session.commit()
    session.close()
    res = requests.get(f'https://newsapi.org/v2/top-headlines?country={region}&apiKey={config.NEWS_API_KEY}')
    news_data = res.json()
    if res.status_code == 200:
        articles = news_data['articles'][:5]
        for article in articles:
            title = article['title']
            url = article['url']
            description = article['description']
            news_text = f"*{title}*\n\n{description}\n\n[–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({url})"
            await bot.send_message(message.chat.id, news_text, parse_mode='Markdown', reply_markup=return_menu_keyboard())
    else:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.", reply_markup=return_menu_keyboard())
    session = Session()
    log_user_action(session, message.from_user.id, message.from_user.username,
                    message.from_user.first_name, message.text)
    session.close()


@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def handle_settings(message):
    session = Session()
    user_settings = session.query(UserSettings).get(message.from_user.id)
    if not user_settings:
        user_settings = UserSettings(user_id=message.from_user.id)
        session.add(user_settings)
        session.commit()
        await bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö.")
    else:
        settings_text = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        if user_settings.city:
            settings_text += f"–ì–æ—Ä–æ–¥: {user_settings.city}\n"
        if user_settings.joke_category:
            settings_text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —à—É—Ç–æ–∫: {user_settings.joke_category}\n"
        if user_settings.news_category:
            settings_text += f"–†–µ–≥–∏–æ–Ω: {user_settings.news_category}\n"
        await bot.send_message(message.chat.id, settings_text)
    session.close()


@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def handle_back_to_menu(message):
    # Clear user state (if needed)
    if message.chat.id in user_states_joke:
        del user_states_joke[message.chat.id]
    elif message.chat.id in user_states_weather:
        del user_states_weather[message.chat.id]
    await start_menu(message)
    session = Session()
    log_user_action(session, message.from_user.id, message.from_user.username,
                    message.from_user.first_name, message.text)
    session.close()

@bot.message_handler(func=lambda message: True)
async def any_message(message):
    log_user_action(message.from_user.id, message.from_user.username,
                    message.from_user.first_name, message.text)

async def go():
    await bot.infinity_polling()